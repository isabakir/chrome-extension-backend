import OpenAI from "openai";
import { config } from "../config.js";

class OpenAIService {
  constructor() {
    this.client = new OpenAI({
      apiKey: config.openai.apiKey,
    });
  }

  async analyze(messageContent, systemPrompt) {
    try {
      const response = await this.client.chat.completions.create({
        model: "gemini-2.0-flash",
        messages: [
          {
            role: "system",
            content: systemPrompt,
          },
          {
            role: "user",
            content: messageContent,
          },
        ],
      });

      const content = response.choices[0].message.content;

      // YanÄ±tÄ± parse et
      const stateMatch = content.match(/\*State of Emotion:\* (.*)/);
      const toneMatch = content.match(/\*User Tone:\* (.*)/);
      const priorityMatch = content.match(/\*Priority Level:\* (.*)/);
      const emojiMatch = content.match(/\*Emoji Suggestion:\* (.*)/);

      return {
        state_of_emotion: stateMatch ? stateMatch[1].trim() : "neutral",
        user_tone: toneMatch ? toneMatch[1].trim() : "neutral",
        priority_level: priorityMatch ? priorityMatch[1].trim() : "low",
        emoji_suggestion: emojiMatch ? emojiMatch[1].trim() : "ğŸ’¬",
      };
    } catch (error) {
      console.error("Error analyzing message with OpenAI:", error);
      // Hata durumunda varsayÄ±lan deÄŸerleri dÃ¶ndÃ¼r
      return {
        state_of_emotion: "neutral",
        user_tone: "neutral",
        priority_level: "low",
        emoji_suggestion: "ğŸ’¬",
      };
    }
  }

  async createEmbedding(text) {
    try {
      const response = await this.client.embeddings.create({
        model: "gemini-2.0-flash",
        input: text,
        encoding_format: "float",
      });

      return response.data[0].embedding;
    } catch (error) {
      console.error("Error creating embedding:", error);
      throw error;
    }
  }

  async processConversation(conversation, pastAnswers) {
    try {
      console.log("pastAnswers", pastAnswers);
      const response = await this.client.chat.completions.create({
        model: "gemini-2.0-flash",
        messages: [
          {
            role: "system",
            content:
              "Sen flalingo.com'da Ã§alÄ±ÅŸan bir mÃ¼ÅŸteri destek operatÃ¶rÃ¼sÃ¼n. Gelen mesajlara doÄŸal tarzÄ±nda cevap ver.Konusma geÃ§misindeki agent sensin   user kullanÄ±cÄ±.YazÄ±m tarzÄ±n  doÄŸal  olmalÄ±. Emoji kullanma ÅŸeklin de doÄŸal olmalÄ± Ã§ok fazla emoji kullanma gerektiÄŸi kadar kullan yada hiÃ§ kullanma ve bir chat sohbeti gibi olmalÄ±. kullanÄ±cÄ±yla mesajlaÅŸÄ±yorsun mailleÅŸmiyorsun. eÄŸer yeteri kadar veri yoksa ve  cevap Ã¼retme daha fazla veriye ihtiyacÄ±n oldugunu sÃ¶yleyebilirsin. Gelen mesajlarÄ±n alakasÄ±z oldugunu dÃ¼ÅŸÃ¼nÃ¼yorsan son mesajÄ±na cevap ver.",
          },
          {
            role: "user",
            content: `KonuÅŸma GeÃ§miÅŸi: ${JSON.stringify(
              pastAnswers
            )}\n\nSoru: ${conversation}`,
          },
        ],
      });
      console.log(response.choices[0].message.content);
      const content = response.choices[0].message.content;

      // EÄŸer yanÄ±t JSON formatÄ±nda deÄŸilse, metni parse ederek JSON oluÅŸtur
      if (content.includes("Summary:")) {
        const summaryMatch = content.match(
          /Summary:(.*?)(?=Was the issue resolved:|$)/s
        );
        const resolvedMatch = content.match(
          /Was the issue resolved:\s*(true|false)/i
        );

        return {
          summary: summaryMatch ? summaryMatch[1].trim() : "Ã–zet bulunamadÄ±",
          is_resolved: resolvedMatch
            ? resolvedMatch[1].toLowerCase() === "true"
            : false,
        };
      }

      // JSON parse etmeyi dene
      try {
        return JSON.parse(content);
      } catch (parseError) {
        console.warn(
          "JSON parse hatasÄ±, dÃ¼z metin yanÄ±tÄ± dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lÃ¼yor:",
          parseError
        );
        return {
          summary: content,
          is_resolved: false,
        };
      }
    } catch (error) {
      console.error("Error processing conversation with OpenAI:", error);
      throw error;
    }
  }
}

export const openaiService = new OpenAIService();
